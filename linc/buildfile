include ../extern/
include ../extern/eigen/
include ../extern/cppcore/
include ../extern/spdlog/
include ../extern/doctest/
include ../extern/SI/

libs =
libs += ../extern/eigen/lib{eigen}
libs += ../extern/cppcore/lib{cppcore}

# There is a non-slow version
# Build the static lib inside external/spdlib directory
# Then remove _slow
libs += ../extern/spdlog/lib{spdlog}

libs += ../extern/doctest/lib{doctest}
libs += ../extern/SI/lib{SI}

# ./ means "when building this dir, also build following target"
# executable linc depends on utility library linc, main.cxx.
# linc.testscript is associated with the linc executable
./: exe{linc}: libue{linc} {cxx}{main} testscript{linc}

# Utility library used by linc executable and
# the unit test executables
# Depends on hxx and cxx files in this directory
# except those who have .test.<something> in their name
# and those who are called main.
# Also depends on the libs
libue{linc}: {hxx cxx}{** -**.test... -main} $libs


## All executables ending with .test are tests.
## So they are built and executed with `b test`.
## They are also not installed with `b install`.
exe{*.test}:
{
  test = true
  install = false
}

# All files ending with <somename>.test.cxx should be compiled
# to executables <somename>.test
# They depend on <somename>.test.hxx, <somename>.test.ixx, <somename>.test.txx
# If <somename>.test.testscript exist, it is associated with the test executable
# bin.whole = false makes so only the used functions are statically linked
# into the test executable
for t: cxx{**.test...}
{
  d = $directory($t)
  n = $name($t)...

  ./: $d/exe{$n}: $t $d/{hxx ixx txx}{+$n} $d/testscript{+$n}
  $d/exe{$n}: libue{linc}: bin.whole = false
}

## If you would want to rebuild stlinit.test every time an stl changes, you could do like this
# Make exception from general rule above:
# for t: cxx{**.test... -stlinit.test...}
# Then make specific rule for the test that depends on stls
# I don't know why the ... in stlinit.test... is needed. But it is.
#./: exe{stlinit.test...}: cxx{stlinit.test.c++} libue{linc} ./test-models/exe{**.stl}
#exe{stlinit.test}:
#{
#  test = true
#  install = false
#}

# Include our own header files
cxx.poptions =+ "-I$out_root" "-I$src_root"

# Print the preprocessor options
#info $cxx.poptions
